const amqp = require('amqplib');
const config = require('./config'); // Archivo de configuraci√≥n con rabbitmqUser, rabbitmqPassword, rabbitmqHost

const {
  default: makeWASocket,
  DisconnectReason,
  useMultiFileAuthState,
  fetchLatestBaileysVersion,
  makeCacheableSignalKeyStore,
  Browsers,
  delay
} = require('@whiskeysockets/baileys');

const pino = require('pino');
const fs = require('fs');
const path = require('path');
const { Boom } = require('@hapi/boom');

const WHATSAPP_QUEUE = 'whatsapp_queue';
const RESPONSE_QUEUE = 'response_queue';
const AUTH_FOLDER = './auth_info_baileys';
const RECONNECT_INTERVAL = 3000;

const logger = pino({
  level: 'debug',
  transport: { target: 'pino-pretty' }
});

// Asegurarse de que exista el directorio de autenticaci√≥n
if (!fs.existsSync(AUTH_FOLDER)) {
  fs.mkdirSync(AUTH_FOLDER, { recursive: true });
}

let channel; // Canal global de RabbitMQ
const instanceId = 1; // Identificador de la instancia (puedes cambiarlo seg√∫n necesites)
let client; // Cliente de WhatsApp

// Funci√≥n para conectar a RabbitMQ
async function connectToRabbitMQ() {
  try {
    const connectionUrl = `amqp://${config.rabbitmqUser}:${config.rabbitmqPassword}@${config.rabbitmqHost}`;
    console.log('Conectando a RabbitMQ con la URL:', connectionUrl);
    const connection = await amqp.connect(connectionUrl);
    channel = await connection.createChannel();
    await channel.assertQueue(WHATSAPP_QUEUE, { durable: true });
    await channel.assertQueue(RESPONSE_QUEUE, { durable: true });
    console.log("Conectado a RabbitMQ");
    return channel;
  } catch (error) {
    console.error("Error al conectar a RabbitMQ:", error);
    console.log("Reintentando conexi√≥n en 5 segundos...");
    await delay(5000);
    return connectToRabbitMQ();
  }
}

// Funci√≥n para crear y conectar el cliente de WhatsApp
async function createWhatsAppClient(instanceId) {
  try {
    const { state, saveCreds } = await useMultiFileAuthState(AUTH_FOLDER);
    const { version, isLatest } = await fetchLatestBaileysVersion();
    console.log(`Usando WA v${version.join('.')}, isLatest: ${isLatest}`);
    
    client = makeWASocket({
      version,
      printQRInTerminal: true,
      browser: Browsers.macOS('Desktop'),
      auth: {
        creds: state.creds,
        keys: makeCacheableSignalKeyStore(state.keys, logger)
      },
      logger,
      msgRetryCounterCache: {},
      generateHighQualityLinkPreview: true,
      defaultQueryTimeoutMs: 60000,
      connectTimeoutMs: 60000,
      retryRequestDelayMs: 2000
    });

    // Manejo de eventos de conexi√≥n usando el estilo del ejemplo
    client.ev.on('connection.update', (update) => {
      const { connection, lastDisconnect } = update;
      
      if (connection === 'close') {
        const shouldReconnect = lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut;
        if (shouldReconnect) {
          console.log(`üîÑ try to connect instance ${instanceId}...`);
          createWhatsAppClient(instanceId); // Vuelve a conectar
        } else {
          console.log(`‚ö†Ô∏è user from instance ${instanceId} deslogged. Scan QR Code again`);
        }
      } else if (connection === 'open') {
        console.log(`‚úÖ Connection started ok for instance ${instanceId}!`);
      }
    });

    // Manejo de mensajes entrantes: se env√≠an a la cola WHATSAPP_QUEUE
    client.ev.on('messages.upsert', async ({ messages }) => {
      try {
        if (!messages || messages.length === 0) return;
        for (const message of messages) {
          if (!message.message) continue;
          const messageType = Object.keys(message.message)[0];
          if (messageType === 'conversation') {
            const messageText = message.message.conversation;
            const phoneNumber = message.key.remoteJid;
            const agentId = client.user.id;  // Obt√©n el agent_id del cliente de WhatsApp
            await channel.sendToQueue(
              WHATSAPP_QUEUE,
              Buffer.from(JSON.stringify({
                phone_number: phoneNumber,
                message: messageText,
                agent_id: agentId,  // Incluye el agent_id en el mensaje
                timestamp: Date.now()
              })),
              { persistent: true }
            );
            logger.info(`Mensaje recibido de ${phoneNumber} enviado a RabbitMQ con agent_id ${agentId}`);
          }
        }
      } catch (error) {
        logger.error('Error procesando el mensaje entrante:', error);
      }
    });

    // Guarda actualizaciones de credenciales
    client.ev.on('creds.update', saveCreds);

    return client;
  } catch (error) {
    logger.error('Error de conexi√≥n a WhatsApp:', error);
    await delay(RECONNECT_INTERVAL);
    return createWhatsAppClient(instanceId);
  }
}

// Funci√≥n para enviar mensajes con reintentos
async function sendMessageWithRetry(sock, options, maxRetries = 3) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      await sock.sendMessage(options.jid, options.message);
      logger.info(`Mensaje enviado exitosamente a ${options.jid} (Intento ${i + 1})`);
      return;
    } catch (error) {
      logger.error(`Error al enviar el mensaje (intento ${i + 1}):`, error);
      if (i === maxRetries - 1) {
        logger.error(`Fallo al enviar mensaje despu√©s de ${maxRetries} intentos a ${options.jid}`);
        throw error;
      }
      await delay(2000);
    }
  }
}

// Funci√≥n para consumir mensajes de la cola RESPONSE_QUEUE y enviarlos a WhatsApp
async function setupResponseHandler(sock, channel) {
  try {
    await channel.consume(RESPONSE_QUEUE, async (msg) => {
      if (!msg) return;
      try {
        const { phone_number, text } = JSON.parse(msg.content.toString());
        
        // Normalizamos el JID:
        // Si phone_number ya contiene '@', asumimos que ya es un JID y quitamos cualquier '+' inicial.
        // Si no, lo consideramos un n√∫mero plano y le a√±adimos el sufijo.
        let jid;
        if (phone_number.includes('@')) {
          jid = phone_number.replace(/^\+/, '');
        } else {
          // Si el n√∫mero empieza con '+' lo removemos y luego agregamos el sufijo.
          const normalized = phone_number.startsWith('+') ? phone_number.slice(1) : phone_number;
          jid = `${normalized}@s.whatsapp.net`;
        }
        
        await sendMessageWithRetry(sock, { jid, message: { text } });
        channel.ack(msg);
        logger.info(`Response sent to ${jid}`);
      } catch (error) {
        logger.error('Error procesando la respuesta:', error);
        channel.nack(msg, false, false);
      }
    }, { noAck: false });
    logger.info(`Escuchando respuestas en la cola ${RESPONSE_QUEUE}`);
  } catch (error) {
    logger.error('Error configurando el manejador de respuestas:', error);
    await delay(RECONNECT_INTERVAL);
    return setupResponseHandler(sock, channel);
  }
}


// Funci√≥n principal de inicio
async function start() {
  try {
    await connectToRabbitMQ();
    const sock = await createWhatsAppClient(instanceId);
    await setupResponseHandler(sock, channel);

    // Manejo de apagado controlado
    process.on('SIGINT', async () => {
      console.log('Apagando...');
      if (channel) {
        await channel.close();
        console.log('Canal RabbitMQ cerrado');
      }
      process.exit(0);
    });
  } catch (error) {
    logger.error('Error en el inicio:', error);
    process.exit(1);
  }
}

start();
